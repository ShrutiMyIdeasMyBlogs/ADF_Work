{
	"name": "Assignment_8_difficult_question_2_DataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ADLS_LS",
						"type": "LinkedServiceReference"
					},
					"name": "TextFile"
				},
				{
					"linkedService": {
						"referenceName": "SQL_LS_2",
						"type": "LinkedServiceReference"
					},
					"name": "sqlSource"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "SQL_LS_2",
						"type": "LinkedServiceReference"
					},
					"name": "UpdateDBTable"
				},
				{
					"linkedService": {
						"referenceName": "SQL_LS_2",
						"type": "LinkedServiceReference"
					},
					"name": "UpdateDBTableSecondTime"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "JoinCommonValueOfBothSources"
				},
				{
					"name": "FilterRecordsWhereDbUserIDisNotNULL"
				},
				{
					"name": "SelectReleventColumn"
				},
				{
					"name": "AssignValueToBothDBPassword"
				},
				{
					"name": "UpdateAllRecord"
				},
				{
					"name": "AssignValueOfFilePasswordToDBUserPassword"
				},
				{
					"name": "MappingColumns"
				},
				{
					"name": "FilterUserPasswordFileNotMatchedDBUserPassword"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "DBUserIDnotNULL"
				},
				{
					"name": "ExpectTrueIfUserIDNotNULL"
				},
				{
					"name": "ReturnTrueWhenUserIDNotNull"
				},
				{
					"name": "CheckIfUserIDNotNULL"
				}
			],
			"scriptLines": [
				"source(output(",
				"          user_id as short,",
				"          user_name as string,",
				"          user_mailid as string,",
				"          user_password_file as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'landing',",
				"     folderPath: 'Assignment_8',",
				"     fileName: 'Assignment_8_Tough_Question_2.txt',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> TextFile",
				"source(output(",
				"          user_id as integer,",
				"          user_name as string,",
				"          user_mailid as string,",
				"          user_password as string,",
				"          user_password_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'scd_3_user',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> sqlSource",
				"sqlSource select(mapColumn(",
				"          db_user_id = user_id,",
				"          db_user_password = user_password,",
				"          db_user_password_1 = user_password_1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"TextFile, select1 lookup(user_id == db_user_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> JoinCommonValueOfBothSources",
				"JoinCommonValueOfBothSources filter(!isNull(db_user_id)) ~> FilterRecordsWhereDbUserIDisNotNULL",
				"AssignValueToBothDBPassword select(mapColumn(",
				"          user_id,",
				"          user_password = db_user_password,",
				"          user_password_1 = db_user_password_1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReleventColumn",
				"FilterUserPasswordFileNotMatchedDBUserPassword derive(db_user_password_1 = db_user_password,",
				"          db_user_password = user_password_file) ~> AssignValueToBothDBPassword",
				"SelectReleventColumn alterRow(updateIf(1==1)) ~> UpdateAllRecord",
				"ExpectTrueIfUserIDNotNULL derive(db_user_password = user_password_file) ~> AssignValueOfFilePasswordToDBUserPassword",
				"AssignValueOfFilePasswordToDBUserPassword select(mapColumn(",
				"          user_name,",
				"          user_mailid,",
				"          user_id,",
				"          user_password = db_user_password,",
				"          user_password_1 = db_user_password_1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MappingColumns",
				"FilterRecordsWhereDbUserIDisNotNULL filter(user_password_file!=db_user_password) ~> FilterUserPasswordFileNotMatchedDBUserPassword",
				"TextFile, select1 lookup(user_id == db_user_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 filter(isNull(db_user_id)) ~> DBUserIDnotNULL",
				"DBUserIDnotNULL assert(expectTrue(!isNull(user_id), false, 'assert1')) ~> ExpectTrueIfUserIDNotNULL",
				"UpdateAllRecord assert(expectTrue(!isNull(user_id), false, 'assert1')) ~> ReturnTrueWhenUserIDNotNull",
				"MappingColumns assert(expectTrue(!isNull(user_id), false, 'assert1')) ~> CheckIfUserIDNotNULL",
				"ReturnTrueWhenUserIDNotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'scd_3_user',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['user_id'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_id,",
				"          user_password,",
				"          user_password_1",
				"     )) ~> UpdateDBTable",
				"CheckIfUserIDNotNULL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'scd_3_user',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_name,",
				"          user_mailid,",
				"          user_id,",
				"          user_password,",
				"          user_password_1",
				"     )) ~> UpdateDBTableSecondTime"
			]
		}
	}
}